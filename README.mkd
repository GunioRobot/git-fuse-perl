git-fuse-perl
=============

A simplistic attempt to provide a FUSE[1] read-only interface to a Git
repository. The possibilities are endless ;)

License
=======

This is Free Software. You can redistribute it and/or modify it under the terms
of either The GNU General Public License[2], as published by the Free Software
Foundation[3], Version 1 or any later version[4], or The Artistic License[5].

Requirements
============

* A non-faint heart
* fuse modules installed and configured for the current user
* perl-fuse[6] compiled and installed

What does it do?
===============

Launching `git-fuse` inside a checked-out Git repository, and giving it an
empty directory name as a parameter will make available the heads of that Git
repository as subdirectories of the mountpoint's `heads` directory,, and the
tree files reachable from those heads as files in the filesystem.

The directories are made available with permissions `r-xr-xr-x` and the files
with permissions `r--r--r--`, regardless of the permissions set in the Git
repository.

You can launch a test doing `make start-fuse`. Navigate the filesystem under
test/ at your leisure, then issue `make stop-fuse` when bored.

An example?
==========

Untar the test-repos.tar and navigate it using Git or gitk. You'll see it
contains silly commits and files and branches.

    $ git show-branch
    ! [all_merged] Merge branch 'pl_stuff' into all_merged
     ! [c_branch] hello world and compiled
      * [master] Added stuff
       ! [pl_stuff] And a Perl file
    ----
    -    [all_merged] Merge branch 'pl_stuff' into all_merged
    +  + [pl_stuff] And a Perl file
    +  + [pl_stuff^] Some utf8 text
    ++   [c_branch] hello world and compiled
    ++*+ [master] Added stuff

By launching "make" (or untarring and launching git-fuse separately)
you will find the following files under the mountpoint `test/`:

    $ find test/
    test/
    test/tags
    test/heads
    test/heads/pl_stuff
    test/heads/pl_stuff/pl
    test/heads/pl_stuff/pl/polish.txt
    test/heads/pl_stuff/pl/hello.pl
    test/heads/pl_stuff/b
    test/heads/pl_stuff/b/c
    test/heads/pl_stuff/b/c/d
    test/heads/pl_stuff/b/c/d/e.txt
    test/heads/pl_stuff/a
    test/heads/pl_stuff/a/b
    test/heads/pl_stuff/a/b/c
    test/heads/pl_stuff/a/b/c/d
    test/heads/pl_stuff/a/b/c/d/e.txt
    test/heads/master
    test/heads/master/b
    test/heads/master/b/c
    test/heads/master/b/c/d
    test/heads/master/b/c/d/e.txt
    test/heads/master/a
    test/heads/master/a/b
    test/heads/master/a/b/c
    test/heads/master/a/b/c/d
    test/heads/master/a/b/c/d/e.txt
    test/heads/c_branch
    test/heads/c_branch/c
    test/heads/c_branch/c/main.c
    test/heads/c_branch/b
    test/heads/c_branch/b/c
    test/heads/c_branch/b/c/d
    test/heads/c_branch/b/c/d/e.txt
    test/heads/c_branch/a
    test/heads/c_branch/a/b
    test/heads/c_branch/a/b/c
    test/heads/c_branch/a/b/c/d
    test/heads/c_branch/a/b/c/d/e.txt
    test/heads/c_branch/a.out
    test/heads/all_merged
    test/heads/all_merged/pl
    test/heads/all_merged/pl/polish.txt
    test/heads/all_merged/pl/hello.pl
    test/heads/all_merged/c
    test/heads/all_merged/c/main.c
    test/heads/all_merged/b
    test/heads/all_merged/b/c
    test/heads/all_merged/b/c/d
    test/heads/all_merged/b/c/d/e.txt
    test/heads/all_merged/a
    test/heads/all_merged/a/b
    test/heads/all_merged/a/b/c
    test/heads/all_merged/a/b/c/d
    test/heads/all_merged/a/b/c/d/e.txt
    test/heads/all_merged/a.out

What just happened?
===================

Your Git repository is made available as a filesystem. What you do with that is
entirely up to you. Here's some suggestions: make available all your branches
of a website as separate hostnames; visually navigate the (branches') history
of a repository via your favourite file manager; write patches so tags also
work.  Since the data is not cached, you can effectively continuing working on
your checked-out repository, and the directory structure will morph along with
your changes.

Bugs? Worries?
==============

Tags do not (yet) work. Files and directories are returned with id and gid of 0
(root, hence the conservative permissions). The code uses qx{} for shelling out
to Git for getting information about trees and blobs. Hopefully this should be
moved to using git-pureperl[7] or a better (faster?) interface. There is a bit
of code repetition when splitting the paths for the heads.

I am quite amazed it does cd, ls and cat, to be perfectly honest.

[1]: http://fuse.sourceforge.net/
[2]: http://dev.perl.org/licenses/gpl1.html
[3]: http://www.fsf.org/
[4]: http://www.fsf.org/licenses/licenses.html#GNUGPL
[5]: http://dev.perl.org/licenses/artistic.html
[6]: git://github.com/dpavlin/perl-fuse.git
[7]: git://github.com/bobtfish/git-pureperl.git

